{"version":3,"sources":["components/firebase.js","components/Nav.js","components/Header.js","components/Main.js","components/LandingPage.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","analytics","Nav","signOut","state","auth","onAuthStateChanged","user","console","log","setState","window","location","reload","className","src","onClick","this","Component","Header","uploadProfileImage","e","uploadImage","imageToUpload","target","files","uniqueKey","database","collection","doc","id","storage","ref","props","uid","put","on","snapshot","progress","Math","round","bytesTransferred","totalBytes","error","child","getDownloadURL","then","url","userUploadedImageToDisplay","firestore","htmlFor","type","onChange","email","userImages","length","style","width","Main","enlargeImage","parentNode","classList","toggle","map","image","i","key","tabIndex","deleteImage","LandingPage","signIn","preventDefault","signInEmail","current","value","password","signInPassword","signInWithEmailAndPassword","catch","errorMessage","message","alert","userInfo","signUp","signUpEmail","signUpPassword","createUserWithEmailAndPassword","signUpButtonClicked","signUpPopUp","React","createRef","onSubmit","App","listAll","res","items","item","push","unshift","userDeletedImage","childNodes","currentSrc","filteredUserImages","filter","refFromURL","delete","userUploadedImagesToDisplay","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.cf43354f.chunk.js","sourcesContent":["import firebase from \"firebase\";\n\nvar firebaseConfig = {\n    apiKey: \"AIzaSyCbwADKsJszQWH_OC62oCd7h8tUiTeOnRo\",\n    authDomain: \"instagram-project-d291e.firebaseapp.com\",\n    databaseURL: \"https://instagram-project-d291e.firebaseio.com\",\n    projectId: \"instagram-project-d291e\",\n    storageBucket: \"instagram-project-d291e.appspot.com\",\n    messagingSenderId: \"333813161472\",\n    appId: \"1:333813161472:web:b9ab0db66694c2c63602e5\",\n    measurementId: \"G-WFWDFCLCE2\"\n};\n// Initialize Firebase\nfirebase.initializeApp(firebaseConfig);\nfirebase.analytics();\n\nexport default firebase;","import React, { Component } from \"react\";\nimport firebase from \"./firebase\";\n\nclass Nav extends Component {\n    constructor() {\n        super();\n        this.state = {\n            auth: firebase.auth(),\n        };\n    }\n\n    signOut = () => {\n        this.state.auth.signOut();\n\n        this.state.auth.onAuthStateChanged(user => {\n            console.log(user)\n            if (user) {\n            } else {\n                this.setState({\n                    user: null,\n                })\n                window.location.reload(false)\n            }\n        })\n    }\n\n    render() {\n        return (\n            <nav>\n                <div className=\"wrapper\">\n                    <div className=\"navLogo\">\n                        <img src=\"https://firebasestorage.googleapis.com/v0/b/project-five-97681.appspot.com/o/Z6fwRPBHhyVDwn8eFKzGX0eUQk13-favourite-images%2FJRr5JCPzDzVRYx1OPeUl?alt=media&token=72dacc8e-57dc-40f5-ba10-2249c4e15244\"></img>\n                    </div>\n\n                    <button className=\"setting\">setting</button>\n\n                    <button onClick={this.signOut} className=\"signOut\">sign out</button>\n\n                </div>\n            </nav>\n        );\n    }\n}\n\nexport default Nav;\n","import React, { Component } from \"react\";\nimport firebase from \"./firebase\";\n\nclass Header extends Component {\n    constructor() {\n        super();\n        this.state = {\n            storage: firebase.storage(),\n            database: firebase.firestore(),\n            progress: 0\n        };\n    }\n\n    uploadProfileImage = e => {\n        console.log(e)\n    }\n\n    uploadImage = e => {\n        const imageToUpload = e.target.files[0];\n\n        const uniqueKey = this.state.database.collection(\"uniqueKey\").doc().id;\n\n        const uploadTask = this.state.storage\n            .ref(`${this.props.user.uid}-images/${uniqueKey}`)\n            .put(imageToUpload);\n\n        uploadTask.on(\n            \"state_changed\",\n            snapshot => {\n                //progress\n                const progress = Math.round((snapshot.bytesTransferred / snapshot.totalBytes) * 100);\n                this.setState({ progress });\n            },\n            error => {\n                //error\n            },\n            () => {\n                //complete\n                this.state.storage\n                    .ref(`${this.props.user.uid}-images`)\n                    .child(uniqueKey)\n                    .getDownloadURL()\n                    .then(url => {\n                        this.props.userUploadedImageToDisplay(url);\n                    });\n            }\n        );\n    };\n\n    render() {\n        return (\n            <header>\n                <div className=\"wrapper headerFlexContainer\">\n                    <div className=\"profileImage\">\n                        <img src=\"https://firebasestorage.googleapis.com/v0/b/project-five-97681.appspot.com/o/Z6fwRPBHhyVDwn8eFKzGX0eUQk13-favourite-images%2FJRr5JCPzDzVRYx1OPeUl?alt=media&token=72dacc8e-57dc-40f5-ba10-2249c4e15244\"></img>\n\n                        <label htmlFor='profileImageUpload'>profile</label>\n                        <input id='profileImageUpload' type='file' onChange={this.uploadProfileImage}></input>\n                    </div>\n\n                    <div className=\"userInfo\">\n                        <h1>{this.props.user.email}</h1>\n\n                        <p>{this.props.userImages.length} posts</p>\n\n                        <label htmlFor='fileUpload'>UPLOAD</label>\n                        <input id='fileUpload' type=\"file\" onChange={this.uploadImage}></input>\n\n                        <div className=\"progressBar\">\n                            <span style={{ width: `${this.state.progress}%` }}></span>\n                        </div>\n                    </div>\n                </div>\n            </header>\n        );\n    }\n}\n\nexport default Header;\n","import React, { Component } from \"react\";\n\nclass Main extends Component {\n    constructor() {\n        super();\n        this.state = {};\n    }\n\n    enlargeImage = e => {\n        const image = e.target.parentNode;\n\n        image.classList.toggle(\"enlarged\");\n    };\n\n    render() {\n        return (\n            <main className=\"gallery\">\n                <div className=\"wrapper\">\n                    {this.props.userImages.map((image, i) => {\n                        return (\n                            <div key={i} className=\"galleryImage\" onClick={this.enlargeImage} tabIndex='0'>\n                                <img src={image}></img>\n                                <button onClick={this.props.deleteImage}>delete</button>\n                            </div>\n                        );\n                    })}\n                </div>\n            </main>\n        );\n    }\n}\n\nexport default Main;\n","import React, { Component } from \"react\";\nimport firebase from \"./firebase\";\n\nclass LandingPage extends Component {\n    constructor() {\n        super();\n        this.state = {\n            user: null,\n            signUpButtonClicked: false,\n            auth: firebase.auth(),\n            signInEmail: React.createRef(),\n            signInPassword: React.createRef(),\n            signUpEmail: React.createRef(),\n            signUpPassword: React.createRef(),\n        };\n    }\n\n    signIn = (e) => {\n        e.preventDefault();\n\n        const email = this.state.signInEmail.current.value;\n        const password = this.state.signInPassword.current.value;\n\n        const promise = this.state.auth.signInWithEmailAndPassword(email, password);\n\n        promise.catch(function (error) {\n            const errorMessage = error.message;\n            alert(errorMessage);\n        });\n\n        this.state.auth.onAuthStateChanged(user => {\n            if (user) {\n                this.setState({\n                    user,\n                }, () => {\n                        this.props.userInfo(user)\n                })\n            }\n        })\n    }\n\n    signUp = (e) => {\n        e.preventDefault();\n        \n        const email = this.state.signUpEmail.current.value;\n        const password = this.state.signUpPassword.current.value;\n        console.log(email, password)\n\n        this.state.auth.createUserWithEmailAndPassword(email, password).catch(function (error) {\n            var errorMessage = error.message;\n\n            alert(errorMessage)\n        });\n\n        this.state.auth.onAuthStateChanged(user => {\n            this.setState({\n                user,\n                signUpButtonClicked: !this.state.signUpButtonClicked,\n            })\n        })\n    }\n\n    // -----------------------------//\n\n    signUpPopUp = () => {\n        this.setState({\n            signUpButtonClicked: !this.state.signUpButtonClicked,\n        })\n    }\n\n\n    render() {\n        return (\n            <div className='landingPage'>\n                <form className='signInForm' onSubmit={this.signIn}>\n                    <label htmlFor='signInEmail'>Email</label>\n                    <input ref={this.state.signInEmail} id='signInEmail' type='email'></input>\n\n                    <label htmlFor='signInPassword'>Password</label>\n                    <input ref={this.state.signInPassword} id='signInPassword' type='password'></input>\n\n                    <button>Login</button>\n                </form>\n\n\n                {this.state.signUpButtonClicked\n                ? \n                    <form onSubmit={this.signUp}>\n                        <label htmlFor='signUpEmail'>Email</label>\n                        <input ref={this.state.signUpEmail} id='signUpEmail' type='email'></input>\n\n                        <label htmlFor='signUpPassword'>Password</label>\n                        <input ref={this.state.signUpPassword} id='signUpPassword' type='password'></input>\n\n                        <button>Sign up</button>\n\n                        <span onClick={this.signUpPopUp}>X</span>\n                    </form>\n                : null}\n                \n                {!this.state.signUpButtonClicked ? <button onClick={this.signUpPopUp}>Sign up</button> : null}\n            </div>\n        );\n    }\n}\n\nexport default LandingPage;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport firebase from \"./components/firebase\";\nimport { BrowserRouter as Router, Route, Link } from \"react-router-dom\";\nimport Nav from \"./components/Nav\";\nimport Header from \"./components/Header\";\nimport Main from \"./components/Main\";\nimport LandingPage from \"./components/LandingPage\";\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      storage: firebase.storage(),\n      auth: firebase.auth(),\n      user: null,\n      userImages: [],\n      userUploadedImagesToDisplay: null\n    };\n  }\n\n  componentDidMount() {\n    this.state.auth.onAuthStateChanged((user) => {\n      if (user) {\n        this.setState({ user });\n        this.userInfo(user);\n      }\n    });\n  }\n\n  userInfo = user => {\n    console.log(user)\n    this.setState({\n      user\n    }, () => {\n    const userImages = [...this.state.userImages];\n\n    this.state.storage\n      .ref()\n      .child(`${this.state.user.uid}-images`)\n      .listAll()\n      .then(res => {\n        res.items.map(item => {\n          item.getDownloadURL().then(url => {\n            userImages.push(url);\n\n            this.setState({ userImages });\n          });\n        });\n      });\n    })\n  }\n\n  userUploadedImageToDisplay = url => {\n    const userImages = [...this.state.userImages];\n\n    userImages.unshift(url);\n\n    this.setState({ userImages });\n  };\n\n  deleteImage = e => {\n    const userImages = [...this.state.userImages];\n\n    const userDeletedImage = e.target.parentNode.childNodes[0].currentSrc;\n\n    const filteredUserImages = userImages.filter(image =>\n      image !== userDeletedImage);\n\n    this.setState({ userImages: filteredUserImages });\n\n    this.state.storage.refFromURL(userDeletedImage).delete();\n  };\n\n  render() {\n    return (\n      <Router>\n        <div>\n          <Nav />\n          \n          {this.state.user \n          ? \n            <div>\n              <Header\n                user={this.state.user}\n                userImages={this.state.userImages}\n                userUploadedImageToDisplay={this.userUploadedImageToDisplay}\n              />\n\n              <Main\n                userImages={this.state.userImages}\n                deleteImage={this.deleteImage}\n              />\n            </div>\n          : \n            <LandingPage userInfo={this.userInfo} /> }\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n\n\n\n\n\n// add bio section that users can change\n\n// add personal info section e.g. email and phone number","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}